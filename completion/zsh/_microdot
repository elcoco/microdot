#compdef _microdot md

MD_CMD="md"

# https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org#getting-started

function _microdot {
    # -OPT[DESCRIPTION]:MESSAGE:ACTION
    #
    # choose a,b or c
    # {-o,--opt}'[choose]:arg:(a b c)' \
    #
    # run _get_dotfiles function to look for arguments
    # {-x,--to-decrypted}'[encrypt dotfile]:DOTFILE:_get_dotfiles' \
    #
    # set $state to option, in this case: --unlink
    # {-u,--unlink}'[unlink dotfile]:DOTFILE:->args' \
    help="-h --help"
    link="-l --link"
    link_all="-L --link-all"
    unlink="-u --unlink"
    unlink_all="-U --unlink-all"
    init="-i --init"
    to_decrypted="-x --to-decrypted"
    to_encrypted="-E --to-encrypted"
    sync="-s --sync"
    watch="-w --watch"
    git="-g --use-git"
    solve_conflict="-C --solve-conflict"
    encrypt="-e --encrypt"
    channel="-c --channel"
    dotfiles_dir="-d --dotfiles-dir"
    assume_yes="-y --assume-yes"
    force="-f --force"
    debug="-D --debug"

    # these are mutually exclusive
    excl="$link $unlink $link_all $unlink_all $init $to_encrypted $to_decrypted $sync $watch $solve_conflict"

    # only watch and sync can use git
    only_git="$link $unlink $link_all $unlink_all $init $to_encrypted $to_decrypted $solve_conflict"

    # only init can use --encrypt
    only_init="$link $unlink $link_all $unlink_all $to_encrypted $to_decrypted $sync $watch $solve_conflict"

    # -C sets context vars like $line and $state
    # -s allows single letter commands
    _arguments -C \
                "($git $excl)"{-i,--init}"[init dotfile]:DOTFILE:_files" \
                "($encrypt $git $excl)"{-l,--link}"[link dotfile]:DOTFILE:_get_dotfiles" \
                "($encrypt $git $excl)"{-u,--unlink}"[unlink dotfile]:DOTFILE:_get_dotfiles" \
                "($encrypt $git $excl)"{-L,--link-all}"[link all dotfiles in channel]" \
                "($encrypt $git $excl)"{-U,--unlink-all}"[unlink all dotfiles in channel]" \
                "($encrypt $git $excl)"{-x,--to-decrypted}"[encrypt dotfile]:DOTFILE:_get_encrypted_dotfiles" \
                "($encrypt $git $excl)"{-E,--to-encrypted}"[decrypt dotfile]:DOTFILE:_get_unencrypted_dotfiles" \
                "($encrypt $git $excl)"{-C,--solve-conflict}"[solve conflict]:CONFLICT:_get_conflicts" \
                "(-c --channel)"{-c,--channel}'[specify channel]:CHANNEL:_get_channels' \
                "(-d --dotfiles-dir)"{-d,--dotfiles-dir}'[specify dotfiles dir]:DIR:_directories' \
                "(-f --force)"{-f,--force}'[use the force]' \
                "($only_init $git $encrypt)"{-e,--encrypt}'[use encryption]' \
                "(-D --debug)"{-D,--debug}'[enable debugging]' \
                "($encrypt $excl)"{-s,--sync}'[sync]' \
                "($encrypt $excl)"{-w,--watch}'[watch]' \
                "($encrypt $only_git -g --use-git)"{-g,--use-git}'[use git]' \
                "(-h --help)"{-h,--help}'[help]' 

    #case "$state" in
    #    cmds)
    #        _arguments -s $($MD_CMD --get-opts)
    #        ;;
    #    args)

    #        case $words[-2] in
    #            (-l|--link)
    #                _get_dotfiles
    #                ;;
    #            (-c|--channel)
    #                _get_channels
    #                ;;
    #        esac
    #        ;;
    #esac
    return 0
}

function get_channel {
    # Return channel if --channel is specified
    for (( i=0 ; i<${#words[@]} ; i++ )) ; do
        if [[ "${words[i]}" == '--channel' || "${words[i]}" == '-c' ]] ; then
            echo "${words[i+1]}"
        fi
    done
}

_get_dotfiles() {
    channel=$(get_channel)
    if [[ -z $channel ]] ; then
        _values "channels" $($MD_CMD --get-dotfiles)
    else
        # TODO need to call twice because result is escaped, i don't know bash! ;)
        dotfiles=$($MD_CMD --channel "$channel" --get-dotfiles)
        if [[ ! -z $dotfiles ]] ; then
            _values "channels" $($MD_CMD --channel "$channel" --get-dotfiles)
        fi
    fi
}

_get_encrypted_dotfiles() {
    channel=$(get_channel)
    if [[ -z $channel ]] ; then
        _values "channels" $($MD_CMD --get-encrypted-dotfiles)
    else
        dotfiles=$($MD_CMD --channel "$channel" --get-encrypted-dotfiles)
        if [[ ! -z $dotfiles ]] ; then
            _values "channels" $($MD_CMD --channel "$channel" --get-encrypted-dotfiles)
        fi
    fi
}

_get_unencrypted_dotfiles() {
    channel=$(get_channel)
    if [[ -z $channel ]] ; then
        _values "channels" $($MD_CMD --get-unencrypted-dotfiles)
    else
        dotfiles=$($MD_CMD --channel "$channel" --get-unencrypted-dotfiles)
        if [[ ! -z $dotfiles ]] ; then
            _values "channels" $($MD_CMD --channel "$channel" --get-unencrypted-dotfiles)
        fi
    fi
}


function _get_channels {
    _values "channels" $($MD_CMD --get-channels)
}

function _get_conflicts {
    channel=$(get_channel)
    
    if [[ -z $channel ]] ; then
        _values "conflicts" $($MD_CMD --get-conflicts)
    else
        conflicts=$($MD_CMD --channel "$channel" --get-conflicts)
        if [[ ! -z $conflicts ]] ; then
            _values "conflicts" $($MD_CMD --channel "$channel" --get-conflicts)
        fi
    fi
}
